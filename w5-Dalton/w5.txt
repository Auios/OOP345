Script started on Fri 19 Feb 2016 01:04:35 PM EST
dwmacaulay@matrix:~/oop345/w5> whoami
dwmacaulay
dwmacaulay@matrix:~/oop345/w5> cat w5.cpp Notifications.* Message.*
// Workshop 5 - Containers
// w5.cpp

#include <iostream>
#include <fstream>
#include "Message.h"
#include "Notifications.h"

const char REC_DELIMITER = '\n';

w5::Notifications collect(std::ifstream& in, char recDelim) {
	w5::Notifications notifications;

	do {
		w5::Message message(in, recDelim);
		if (!message.empty())
			notifications += std::move(message);
	} while (in);

	return notifications;
}

int main(int argc, char* argv[]) {
	if (argc == 1) {
		std::cerr << argv[0] << ": missing file operand\n";
		return 1;
	}
	else if (argc != 2) {
		std::cerr << argv[0] << ": too many arguments\n";
		return 2;
	}
	std::ifstream file(argv[1]);
	if (!file) {
		std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n";
		return 3;
	}

	std::cout << "\nNotifications\n=============\n\n";
	w5::Notifications notifications = collect(file, REC_DELIMITER);

	notifications.display(std::cout);

	std::cout << "Press any key to continue ... ";
	std::cin.get();
}#include "Notifications.h"
#include "Message.h"

using namespace std;

namespace w5
{
	Notifications::Notifications()
	{
		msgTable = new Message[10];
		count = 0;
	}
	Notifications::Notifications(const Notifications& N)
	{
		msgTable = nullptr;
		*this = N;
	}
	Notifications& Notifications::operator=(const Notifications& N)
	{
		if (this != &N)
		{
			if (msgTable)
				delete[] msgTable;
			msgTable = 0;
			count = 0;
			if (N.msgTable)
			{
				count = N.count;
				msgTable = new Message[10];
				for (int x = 0; x < count; x++)
				{
					cout << x << endl;
					msgTable[x] = N.msgTable[x];
					cout << x << endl;
				}
			}
		}

		return *this;
	}
	Notifications::Notifications(Notifications&& N)
	{
		msgTable = nullptr;
		*this = std::move(N);
	}
	Notifications&& Notifications::operator=(Notifications&& N)
	{
		if (this != &N)
		{
			if (msgTable)
				delete[] msgTable;
			msgTable = nullptr;
			count = 0;

			count = N.count;
			msgTable = N.msgTable;

			N.count = 0;
			N.msgTable = 0;
		}

		return std::move(*this);
	}
	Notifications::~Notifications()
	{
		if(msgTable) delete[] msgTable;
	}
	void Notifications::operator+=(const Message& msg)
	{
		if (count < 10)
		{
			msgTable[count] = msg;
			count++;
		}
	}
	void Notifications::display(std::ostream& os) const
	{
		//os << "We have " << count << " tweets\n";

		for (int x = 0; x < count; x++)
		{
			cout << "Message\n";
			msgTable[x].display(os);
		}
	}
}#pragma once
#include "Message.h"

namespace w5
{
	class Notifications
	{
		Message* msgTable;
		int count;
	public:
		Notifications();
		Notifications(const Notifications& N);
		Notifications& operator=(const Notifications& N);
		Notifications( Notifications&& N);
		Notifications&& operator=(Notifications&& N);
		~Notifications();
		void operator+=(const Message& msg);
		void display(std::ostream& os) const;
	};
}#include "Message.h"

using namespace std;

namespace w5
{
	Message::Message()
	{

	}
	Message::Message(std::ifstream& in, char c)
	{
		string line;
		getline(in, line, c);
		if (in.eof())
		{
			//cout << "EOF\n";
			return;
		}
		auto cr = line.find('\r');
		if (cr != string::npos)
		{
			line.erase(line.begin() + cr);
		}

		//cout << "read -->" << line << "<--\n";

		int index = 0;

		while (index <= line.size() && line[index] != ' ')
		{
			name += line[index];
			index++;
		}
		//cout << "name -->" << name << "<--\n";
		if (index == line.size())
			return;
		index++;
		if (index < line.size() && line[index] == '@')
		{
			index++;
			while (index <= line.size() && line[index] != ' ')
			{
				reply += line[index];
				index++;
			}
		}
		
		//cout << "reply -->" << reply << "<--\n";
		if (index == line.size())
			return;
		//index++;
		
		while (index < line.size())
		{
			tweet += line[index];
			index++;
		}
		
		//cout << "tweet -->" << tweet << "<--\n";
	}
	bool Message::empty() const
	{
		return tweet.empty();
	}
	void Message::display(std::ostream&) const
	{
		if (reply.empty())
		{
			cout << " User  : " << name << "\n" << " Tweet : " << tweet << endl << endl;
		}
		else
		{
			cout << " User  : " << name << "\n Reply : " << reply << "\n Tweet : " << tweet << endl << endl;
		}
		
	}
}#pragma once
#include <fstream>
#include <iostream>
#include <string>

using namespace std;

namespace w5
{
	class Message
	{
		string name, reply, tweet;
	public:
		Message();
		Message(std::ifstream& in, char c);
		bool empty() const;
		void display(std::ostream&) const;
	};
}dwmacaulay@matrix:~/oop345/w5> g++ -o w5 -std=c++0x w5.cpp Notifications.cpp Messsage.cpp
dwmacaulay@matrix:~/oop345/w5> w5 w5_test.dat

Notifications
=============

Message
 User  : jim
 Tweet : Workshop 5 is cool

Message
 User  : harry
 Reply : jim
 Tweet :  working on workshop 5 now

Message
 User  : dave
 Tweet : what the ^#$%!

Message
 User  : john
 Reply : harry
 Tweet :  I'm done

Press any key to continue ... 
dwmacaulay@matrix:~/oop345/w5> exit
exit

Script done on Fri 19 Feb 2016 01:05:52 PM EST
