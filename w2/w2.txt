Script started on Mon 01 Feb 2016 08:34:28 PM EST
cango@matrix:~/Adat/OOP345/w2> whoami
cango
cango@matrix:~/Adat/OOP345/w2> cat station.h station.cpp stations.h stations.cpp
//Station
#pragma once

#include <iostream>
#include <string>
#include <fstream>

namespace w2
{
	enum PassType
	{
		PASS_STUDENT,
		PASS_ADULT,
		PASS_COUNT
	};

	class Station
	{
	private:
		std::string name;
		unsigned passCounts[PASS_COUNT];

	public:
		Station(){}// default ctor
		Station(std::fstream& is);
		void report();
		void set(const std::string& n, unsigned s, unsigned a);
		void update(PassType pt, int num);
		unsigned inStock(PassType pt) const;
		const std::string& getName() const;
	};
}//Station
#include "station.h"

namespace w2
{
	Station::Station(std::fstream& is)
	{
		std::getline(is, name, ';'); //Read station name up to the ';'. Throw away the ';'
		//std::cout << "name= -->" << name << "<--\n";
		is >> passCounts[PASS_STUDENT];
		is >> passCounts[PASS_ADULT];
		std::string s;
		std::getline(is, s); //Throw away up to EOL

		//Debug
		/*
		std::cout << "Student count = " << passCounts[PASS_STUDENT];
		std::cout << "  Adult count = " << passCounts[PASS_ADULT];
		std::cout << "\n";
		*/
	}

	void Station::report()
	{
		std::cout
			<< name
			<< " "
			<< passCounts[PASS_STUDENT]
			<< " "
			<< passCounts[PASS_ADULT]
			<< "\n";
	}

	void Station::set(const std::string& n, unsigned s, unsigned a)
	{
		name = n;
		passCounts[PASS_STUDENT] = s;
		passCounts[PASS_ADULT] = a;
	}

	void Station::update(PassType pt, int num)
	{
		passCounts[pt] += num;
	}

	unsigned Station::inStock(PassType pt) const
	{
		return passCounts[pt];
	}

	const std::string& Station::getName() const
	{
		return name;
	}
}//Stations
#pragma once

#include <iomanip>
#include <string>
#include "station.h"

namespace w2
{
	class Stations
	{
	private:
		int count;
		Station *stations;
		std::string fileName;
	public:
		~Stations();
		Stations(char *dataFile);
		void update();
		void restock();
		void report();
	};
}//Stations
#include "stations.h"

namespace w2
{
	Stations::~Stations()
	{
		//Write out file and update. (Truncate)
		std::fstream os(fileName, std::ios::out | std::ios::trunc);
		if (os)
		{
			os << count << ";\n";
			for(int i=0; i < count; i++)
			{
				os << stations[i].getName() << ";" << stations[i].inStock(PASS_STUDENT) << " " << stations[i].inStock(PASS_ADULT) << "\n";
			}
			// Write station count + ';' + '\n'
			// For each stations
			// write name ';' student count ' ' adult count '\n'
			os.close();
		}
		delete[] stations;
	}

	Stations::Stations(char *dataFile)
	{
		fileName = dataFile;
		std::fstream is(dataFile, std::ios::in);
		//if (!is.is_open())
		if (!is)
		{
			std::cerr << "Cannot open file " << dataFile << "\n";
			return;
		}

		//Read station count
		is >> count;
		//std::cout << "Station count=" << count << "\n"; //Debug

		//Expect a semicolon
		char c;
		is >> c;
		if (c != ';')
		{
			std::cerr << "Not our datafile, expected a semicolon ';', but found -->" << c << "<--\n";
		}
		else
		{
			std::string s;
			getline(is, s); //Read up to end-of-line into s

			stations = new Station[count];
			for (int i = 0; i < count; i++)
			{
				//Call station and assign
				stations[i] = Station(is);
			}
		}

		is.close();
	}

	void Stations::update()
	{
		std::cout
			<< "Passes Sold :" << "\n"
			<< "-------------" << "\n";
		for (int i = 0; i < count; i++)
		{
			int s, a;

			std::cout << stations[i].getName() << "\n";

			std::cout << "Student Passes sold : ";
			std::cin >> s;

			std::cout << "Adult   Passes sold : ";
			std::cin >> a;

			//std::cout << s << " ~~~ " << a << "\n"; //Debug

			unsigned numS = stations[i].inStock(PASS_STUDENT);
			//std::cout << "numS=" << numS << "\n"; //Debug
			if (s < numS)
			{
				//numS -= s;
				stations[i].update(PASS_STUDENT, -s);
			}
			//std::cout << "numS=" << numS << "\n"; //Debug

			unsigned numA = stations[i].inStock(PASS_ADULT);
			//std::cout << "numS=" << numA << "\n"; //Debug
			if (a < numA)
			{
				//numA -= a;
				stations[i].update(PASS_ADULT, -a);
			}
			//std::cout << "numS=" << numA << "\n"; //Debug
		}
	}

	void Stations::restock()
	{
		std::cout
			<< "Passes Added :" << "\n"
			<< "--------------" << "\n";

		for(int i = 0; i < count; i++)
		{
			int s,a;

			std::cout << stations[i].getName() << ":\n";

			std::cout << "Student Passes added : ";
			std::cin >> s;
			if(s > 0)
			{
				stations[i].update(PASS_STUDENT,s);
			}

			std::cout << "Adult   Passes added : ";
			std::cin >> a;
			if(a > 0)
			{
				stations[i].update(PASS_ADULT,a);
			}
		}
	}

	void Stations::report()
	{
		std::cout
			<< "Passes in stock : Student Adult" << "\n"
			<< "-------------------------------" << "\n";

		for (int i = 0; i < count; i++)
		{
			std::cout
				<< std::setw(21) << std::left << stations[i].getName() << " "
				<< std::setw(5) << std::left << stations[i].inStock(PASS_STUDENT) << " "
				<< stations[i].inStock(PASS_ADULT) << "\n";

			/*
			std::cout
				<< "Station " << stations[i].getName() << " "
				<< stations[i].inStock(PASS_STUDENT) << " "
				<< stations[i].inStock(PASS_ADULT)
				<< ":\n";
			//stations[i].report();
			*/
		}
	}
}cango@matrix:~/Adat/OOP345/w2> g++ -std=c++0x -o w2 -Wall w2.cpp station.cpp stations.cpp[C[1P[1P[1P[1P[1P[1P
cango@matrix:~/Adat/OOP345/w2> w2 Stations.dat

Command Line : w2 Stations.dat 
Passes Sold :
-------------
Spadina
Student Passes sold : 5
Adult   Passes sold : 8
Bathurst
Student Passes sold : 34
Adult   Passes sold : 52
Keele
Student Passes sold : 21
Adult   Passes sold : 13
Bay
Student Passes sold : 67
Adult   Passes sold : 65
Passes Added :
--------------
Spadina:
Student Passes added : 29
Adult   Passes added : 52
Bathurst:
Student Passes added : 113
Adult   Passes added : 61
Keele:
Student Passes added : 51
Adult   Passes added : 52
Bay:
Student Passes added : 109
Adult   Passes added : 107
Passes in stock : Student Adult
-------------------------------
Spadina               100   200
Bathurst              200   300
Keele                 100   100
Bay                   200   200
cango@matrix:~/Adat/OOP345/w2> exit
exit

Script done on Mon 01 Feb 2016 08:36:02 PM EST
